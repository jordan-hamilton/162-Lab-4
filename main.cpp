/***********************************************************************************************
** Program name: Lab 4
** Author: Jordan Hamilton
** Date: 10/21/2018
** Description: This zoo tycoon game starts the player with a sum of money to purchase animals,
** beginning with 1 or 2 penguins, tigers and turtles. The player's money is subtracted for each
** purchased animal. Then, in a while loop, the animals in the zoo age by one day, are fed and
** reduce the players money by the cost of feeding each animal, then an random event occurs:
** an animal of a random type may die, an animal of a random type may have babies according to
** the number of babies associated with that animal's class, the player is rewarded with an
** added random bonus for the day based on the number of tigers in the zoo, or nothing occurs
** that day. Finally, the player's money is increased by the payoff associated with each animal
** in the zoo according to its type. The player is given the opportunity to purchase an adult
** animal, or skip their turn by not making a purchase. A long as the player's money is greater
** than 0 and the player has selected to continue the game at the end of a turn, the game
** continues. If the player runs out of money or quits the game, the program ends.
***********************************************************************************************/

#include <iostream>
#include <memory>

#include "Menu.hpp"
#include "Instructor.hpp"
#include "Person.hpp"
#include "Student.hpp"
#include "University.hpp"

using std::move;
using std::unique_ptr;

void addPeopleToMenu();

/***********************************************************************************************
** Description: This program can be run via the lab4 executable generated by make.
***********************************************************************************************/
int main() {

  unsigned seed = time(0);
  srand(seed);

  unique_ptr<Menu> mainMenu(new Menu());

  mainMenu->addMenuItem("View all buildings");
  mainMenu->addMenuItem("View all students and faculty");
  mainMenu->addMenuItem("Select a person to do work");
  mainMenu->addMenuItem("Quit");

  University OSU("Oregon State University");

  unique_ptr<Person> student1(new Student("John Appleseed"));
  unique_ptr<Person> instructor1(new Instructor("Professor Professorson"));
  unique_ptr<Building> building1(new Building("1201 5th St", "Admin Building", 10000));

  OSU.addPerson(move(student1));
  OSU.addPerson(move(instructor1));
  OSU.addBuilding(move(building1));

  switch(mainMenu->getIntChoiceFromPrompt("Select a menu option:", 1, mainMenu->getMenuChoices(), true)) {

    case 1 : OSU.printBuildingInfo();
             break;
    case 2 : OSU.printPeople();
             break;
    case 3 : OSU.pickWorker();
             break;
    default : {}
    
  }

  return 0;

}

/*void addPeopleToMenu(University &uni, Menu &menu) {
  std::cout << "size: " << uni.people.size() << std::endl;
  for (unsigned int i = 0; i < uni.people.size(); i++) {
    std::cout << uni.people[i]->getName() << std::endl;
    menu.addMenuItem(uni.people[i]->getName());

  }

}*/
